// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using UntisExp;

namespace vplan
{
	public partial class VplanViewController : UITableViewController
	{
		List<Data> ti;
		List<Igno> ili;
		UIToolbar toolbar;
		Fetcher fetcher;
		PrefManager pm = new PrefManager ();

		static bool UserInterfaceIdiomIsPhone {
			get { return UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone; }
		}

		public VplanViewController (IntPtr handle) : base (handle)
		{
			this.Title = "Vertretungen";
			this.TabBarItem.Image = UIImage.FromBundle ("first");
			fetcher = new Fetcher (clear, Alert, refresh, add);
			ti = new List<Data> ();
			ili = new List<Igno> ();
		}

		public void Alert (string title, string text, string btn)
		{
			InvokeOnMainThread (new NSAction (delegate {
				spinnner.StopAnimating();
				new UIAlertView (title, text, null, btn, null).Show ();
			}));
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad ();
			spinnner.StartAnimating ();
			TableView.ContentInset = new UIEdgeInsets (20.0f, 0.0f, 25.0f, 0.0f);
		}
		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
			if (UserInterfaceIdiomIsPhone)
				InitVplan ();
		}

		/// <summary>
		/// Shows the button that allows access to the master view popover
		/// </summary>
		public void AddContentsButton (UIBarButtonItem button)
		{
			button.Title = "Contents";
			toolbar.SetItems (new UIBarButtonItem[] { button }, false );
		}

		/// <summary>
		/// Hides the button that allows access to the master view popover
		/// </summary>
		public void RemoveContentsButton ()
		{
			toolbar.SetItems (new UIBarButtonItem[0], false);
		}

		protected void InitVplan()
		{
			int group;
			try {
				int igC = pm.getInt ("ignoredCount");
				try {
					for (int i = igC; i > 0; i--) {
						string igKey = "ignored"+ Convert.ToString(i);
						string value = pm.getString(igKey);
						ili.Add(new Igno(value));
					}
				} catch {}
			} catch {}
			try {
				group = pm.getInt ("group");
				if (group == 0) {
					throw new Exception();
				} else {
					fetcher.getTimes(group);
				}
			}
			catch {
				if (UserInterfaceIdiomIsPhone) {
					this.TabBarController.SelectedIndex = 2;
					this.TabBarController.SelectedViewController = TabBarController.ChildViewControllers [2];
				} else {
					spinnner.StopAnimating ();
					var li = new List<Data> ();
					li.Add (new Data("Hallo! WÃ¤hle eine Klasse, um zu starten."));
					TableView.Source = new TableSource (li);
					TableView.ReloadData ();
				}
			}
		}

		public void reload() {
			spinnner.StartAnimating ();
			InitVplan ();
		}

		public void add(Data v1) {
			InvokeOnMainThread (new NSAction (delegate {
				try {
					ili.ForEach (delegate (Igno curr) {
						if (curr.Fach == v1.AltFach && curr.Lehrer == v1.Lehrer)
							throw new Exception();
					});
					spinnner.StopAnimating ();
					ti.Add (v1);
					List<Data> _ti = ti;
					if (_ti.Count == 0) {
						_ti.Add(new Data());
					}
					TableView.Source = new TableSource (_ti);
					TableView.ReloadData();
					TableView.AwakeFromNib();
				} catch {} 
			}));
		}

		public void clear() {

			try {
				ti.Clear ();
				TableView.Source = new TableSource (ti);
			} catch {
			}
		}

		public void refresh(List<Data> v1) {
			InvokeOnMainThread (new NSAction (delegate {
				for (int i = v1.Count - 1; i >= 0; i--)
				{
					ili.ForEach (delegate (Igno curr) {
						try{
							if (curr.Fach == v1[i].AltFach && curr.Lehrer == v1[i].Lehrer)
								v1.RemoveAt(i);
						} catch {}
					});
				}
				spinnner.StopAnimating ();
				List<Data> _ti = v1;
				if (_ti.Count == 0) {
					_ti.Add(new Data());
				}
				TableView.Source = new TableSource(_ti);
				TableView.ReloadData();
				TableView.AwakeFromNib();
				ti = v1;
			}));
		}

		protected void CreateTableItems ()
		{
			List<Data> tableItems = new List<Data> ();
			tableItems.Add (new Data ());
			TableView.Source = new TableSource (tableItems);
		}

	}
}
